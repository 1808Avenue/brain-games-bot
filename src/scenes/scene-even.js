import { Scenes } from 'telegraf';
import preparingDataForGameEven from '../games/game-even.js';

// ROUND 1
export const evenRound1 = new Scenes.BaseScene('even-round1');
const [question1, answer1] = preparingDataForGameEven();
evenRound1.enter(async (ctx) => {
  await ctx.reply('–û—Ç–≤–µ—Ç—å—Ç–µ "–¥–∞", –µ—Å–ª–∏ —á–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ, –∏–ª–∏ "–Ω–µ—Ç" –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ.');
  await ctx.reply(`${question1}`);
  await ctx.reply('–í–∞—à –æ—Ç–≤–µ—Ç:');
});
evenRound1.on('text', async (ctx) => {
  if (ctx.message.text.toLowerCase() !== answer1) {
    await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.');
    await ctx.reply('–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!');
    await ctx.scene.leave();
  } else {
    await ctx.reply('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!');
    await ctx.scene.enter('even-round2');
  }
});

// ROUND 2
export const evenRound2 = new Scenes.BaseScene('even-round2');
const [question2, answer2] = preparingDataForGameEven();
evenRound2.enter(async (ctx) => {
  await ctx.reply('–û—Ç–≤–µ—Ç—å—Ç–µ "–¥–∞", –µ—Å–ª–∏ —á–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ, –∏–ª–∏ "–Ω–µ—Ç" –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ.');
  await ctx.reply(`${question2}`);
  await ctx.reply('–í–∞—à –æ—Ç–≤–µ—Ç:');
});
evenRound2.on('text', async (ctx) => {
  if (ctx.message.text.toLowerCase() !== answer2) {
    await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.');
    await ctx.reply('–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!');
    await ctx.scene.leave();
  } else {
    await ctx.reply('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!');
    await ctx.scene.enter('even-round3');
  }
});

// ROUND 3
export const evenRound3 = new Scenes.BaseScene('even-round3');
const [question3, answer3] = preparingDataForGameEven();
evenRound3.enter(async (ctx) => {
  await ctx.reply('–û—Ç–≤–µ—Ç—å—Ç–µ "–¥–∞", –µ—Å–ª–∏ —á–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ, –∏–ª–∏ "–Ω–µ—Ç" –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ.');
  await ctx.reply(`${question3}`);
  await ctx.reply('–í–∞—à –æ—Ç–≤–µ—Ç:');
});
evenRound3.on('text', async (ctx) => {
  if (ctx.message.text.toLowerCase() !== answer3) {
    await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.');
    await ctx.reply('–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!');
    await ctx.scene.leave();
  } else {
    await ctx.reply('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!');
    await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!');
    await ctx.reply('üèÜ');
    await ctx.scene.leave();
  }
});
